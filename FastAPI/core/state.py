from typing import TypedDict, List, Dict, Annotated
from langchain_core.messages import AnyMessage, BaseMessage
from langgraph.graph.message import add_messages

# keeping
class AgentState(TypedDict):
    # human input
    task: str
    # plan the planning agent will generate
    plan: str
    # draft of the report
    draft: str
    # critique agent will populate this key
    critique: str
    # documents tavily has come back with
    web_content: List[str]
    # information from the database
    db_content: Annotated[List[AnyMessage], add_messages]
    db_summary: str
    trajectory: List[str]
    # information from running the simulation
    raw_simulation: Annotated[List[BaseMessage], add_messages]
    clean_simulation: str
    # keep track of how many times we've gone through the loop
    revision_number: int
    max_revisions: int
    # chart generation
    chart_plan: List[Dict[str, str]]
    # path to the chart generated by the database_plan_node
    chart_metadata: List[Dict[str, str]]

    # to delete all of these
    current_chart_index: int
    chart_code: str
    chart_generation_success: bool
    chart_generation_error: str
    chart_retry_count: int
    max_chart_retries: int

    articles_path: str
    parts_path: str
    # required by the supervisor
    messages: Annotated[List[AnyMessage], add_messages]
    remaining_steps: int